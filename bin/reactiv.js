"use strict";
exports.version = 0.1;
var root;
var just_patched;
var patching;
var patch_next;
var Component = (function () {
    function Component(props) {
        this.props = props;
        this; // ninja implements without needing to export
    }
    Component.prototype.componentWillMount = function (props, state) { };
    ;
    Component.prototype.componentDidMount = function (props, state) { };
    ;
    Component.prototype.componentWillUnmount = function (props, state) { };
    ;
    Component.prototype.shouldComponentUpdate = function (next_props, next_state) { return true; };
    Component.prototype.componentWillReceiveProps = function (next_props, next_state) { };
    ;
    Component.prototype.render = function () { };
    ;
    Component.prototype.getState = function () {
        return this.state;
    };
    Component.prototype.setState = function (state) {
        this.state = state;
    };
    return Component;
}());
exports.Component = Component;
var html = "";
function patch(element, fn) {
    var node = (element ? element["__reactiv_view_node"] : null);
    if (!node && element)
        element["__reactiv_view_node"] = node = {
            parent: null,
            tag: element.nodeName.toLowerCase(),
            node: element,
            key: null,
            attrs: {},
            kids: []
        };
    just_patched = null;
    patching = null;
    patch_next = node;
    root = node;
    html = null;
    if (!element) {
        html = "";
        fn();
        return html;
    }
    elementOpen(element.nodeName, null, null);
    fn();
    elementClose();
}
exports.patch = patch;
var closingHtml = [];
function elementVoid(tag, key, statics, a1, a2, a3, a4, a5, a6) {
    elementOpen.apply(null, arguments);
    elementClose.apply(null, arguments);
}
exports.elementVoid = elementVoid;
function text(value, formatters) {
    if (!root) {
        html += value;
        return;
    }
    var node = _elementOpen("#text", null, null);
    if (node.text !== value) {
        var formatted = node.text = value;
        for (var i = 1; i < arguments.length; i++) {
            var formatter = arguments[i];
            if (formatter)
                formatted = formatter(formatted);
        }
        node.node.data = formatted;
    }
    elementClose();
}
exports.text = text;
function elementOpen(tag, key, statics, n1, v1, n2, v2, n3, v3) {
    _elementOpen.apply(null, arguments);
}
exports.elementOpen = elementOpen;
function sync_arg(node, name, value) {
    if (value === null || value === undefined)
        return false;
    var existing_value = patching.attrs[name];
    switch (name) {
        case "style":
            if (!root) {
                html += " style=\"";
                var first = true;
                for (var key in value)
                    if (value.hasOwnProperty(key)) {
                        if (!first)
                            html += " ";
                        first = false;
                        html += key + ": " + value[key] + ";";
                    }
                html += "\"";
                break;
            }
            if (patching.component)
                throw new Error("components don't have dom nodes, you cannot set styles directly on them");
            if (typeof value === "string") {
                node.style.cssText = value;
                break;
            }
            var style = node.style;
            var visited_style = {};
            for (var prop in value) {
                var prop_value = value[prop];
                visited_style[prop] = true;
                if (!existing_value || existing_value[prop] !== prop_value) {
                    style[prop] = prop_value;
                    (patching.attrs[name] = existing_value = existing_value || {})[prop] = prop_value;
                }
            }
            for (var prop in existing_value)
                if (!visited_style[prop]) {
                    delete existing_value[prop];
                    style[prop] = "";
                }
            break;
        default:
            if (existing_value !== value)
                patching.attrs[name] = value;
            if (name === "className")
                name = "class";
            if (["object", "function"].indexOf(typeof value) !== -1) {
                if (name.slice(0, 2) === "on" && typeof value === "function")
                    (function (fn) {
                        var event_name = name.slice(2).toLowerCase();
                        if (existing_value !== fn)
                            patching.node.removeEventListener(event_name, existing_value);
                        patching.node.addEventListener(event_name, fn);
                    })(value);
            }
            else if (!patching.component)
                if (root)
                    node.setAttribute(name, value);
                else
                    html += " " + name + "=\"" + value + "\"";
            break;
    }
    return true;
}
;
function _elementOpen(tag, key, statics, n1, v1, n2, v2, n3, v3) {
    sync.apply(null, arguments);
    //    if (patching.component)
    //        return patching;
    var visited = {};
    var node = patching.node;
    if (statics)
        for (var i = 0; i < statics.length; i += 2)
            if (sync_arg(node, statics[i], statics[i + 1]))
                visited[statics[i]] = true;
    if (root || typeof tag === "string")
        for (var i = 3; i < arguments.length; i += 2)
            if (sync_arg(node, arguments[i], arguments[i + 1]))
                visited[arguments[i]] = true;
    if (!root && typeof tag === "string")
        html += ">";
    for (var name_1 in patching.attrs)
        if (!visited[name_1]) {
            if (name_1.slice(0, 2) === "on" && typeof patching.attrs[name_1] === "function")
                node.removeEventListener(name_1.slice(2).toLowerCase(), patching.attrs[name_1]);
            else if (!patching.component)
                if (root)
                    patching.node.removeAttribute(name_1);
            delete patching.attrs[name_1];
        }
    return patching;
}
function elementClose() {
    if (!root) {
        if (closingHtml.length)
            html += closingHtml.pop();
        return;
    }
    if (patching) {
        var kids = patching.kids;
        while (true) {
            var child = kids[kids.length - 1];
            if (!child || child === just_patched)
                break;
            if (child.component && child.component.componentWillUnmount)
                child.component.componentWillUnmount();
            patching.node.removeChild(child.node);
            kids.splice(kids.indexOf(child), 1);
        }
        for (var _i = 0, _a = kids.slice(); _i < _a.length; _i++) {
            var child = _a[_i];
            if (child.parent !== patching)
                kids.splice(kids.indexOf(child), 1);
        }
    }
    just_patched = patching;
    patch_next = (patching && patching.parent) ? patching.parent.kids[patching.parent.kids.indexOf(patching) + 1] : undefined;
    patching = patching ? patching.parent : null;
}
exports.elementClose = elementClose;
function getProps(tag, key, statics, n1, v1, n2, v2, n3, v3) {
    patching = patch_next;
    patch_next = patching.kids[0];
    var props = {};
    if (statics)
        for (var i = 0; i < statics.length; i += 2) {
            var name_2 = statics[i];
            var value = statics[i + 1];
            if (value !== null && value !== undefined)
                props[name_2] = value;
        }
    for (var i = 3; i < arguments.length; i += 2) {
        var name_3 = arguments[i];
        var value = arguments[i + 1];
        if (value !== null && value !== undefined)
            props[name_3] = value;
    }
    return props;
}
function call(node, fn) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return fn && node && node.component && node.component[fn] ? node.component[fn].apply(patching.component, args) : undefined;
}
function renderComponent(is_new, next_props) {
    if (is_new) {
        call(patching, "render");
        return;
    }
    patching.component.props = patching.component.props || {};
    call(patching, "componentWillReceiveProps", next_props, patching.component.state);
    patching.component.props = next_props;
    if (call(patching, "shouldComponentUpdate", next_props) === false) {
        just_patched = patch_next;
        patch_next = patching.kids[patching.kids.indexOf(just_patched) + 1];
        return;
    }
    call(patching, "componentWillUpdate", patching.component.props, patching.component.state);
    call(patching, "render");
    call(patching, "componentDidUpdate", patching.component.props, patching.component.state);
}
function sync(tag, key, statics, n1, v1, n2, v2, n3, v3) {
    just_patched = null;
    var reuse_vnode = patch_next && patch_next.key === key;
    if (reuse_vnode)
        if (typeof tag === "string")
            reuse_vnode = patch_next.tag === tag || patch_next.tag === tag.toLowerCase();
        else
            reuse_vnode = patch_next.component && patch_next.component.constructor["name"] === tag["name"];
    var replacing_child;
    var parent_node;
    var kids = patching ? patching.kids : null;
    if (reuse_vnode) {
        var next_props_1 = getProps.apply(null, arguments);
        if (patching.component)
            renderComponent(!reuse_vnode, next_props_1);
        return;
    }
    replacing_child = patch_next;
    patch_next = key && patching ? kids.filter(function (c) { return c.key === key; })[0] : null;
    var create_component = false;
    if (!patch_next)
        if (typeof tag === "function") {
            patch_next = { parent: patching, node: null, tag: tag["name"], key: key, attrs: {}, component: null, kids: [] };
            create_component = true;
        }
        else {
            if (!root) {
                html += "<" + tag;
                closingHtml.push("</" + tag + ">");
            }
            var doc = patching && patching.node ? patching.node.ownerDocument : document;
            patch_next = { parent: patching, node: tag === "#text" ? doc.createTextNode("") : doc.createElement(tag), tag: tag.toLowerCase(), key: key, attrs: {}, kids: [] };
        }
    if (patching) {
        kids.splice(replacing_child ? kids.indexOf(replacing_child) : kids.length, 0, patch_next);
        parent_node = patching.node;
    }
    var next_props = getProps.apply(null, arguments);
    if (create_component) {
        var fn = tag.bind.apply(tag, [null].concat([]));
        patching.component = new fn();
        patching.component.props = next_props;
        patching.component.state = patching.component.state || call(patching, "getState");
        call(patching, "componentWillMount");
    }
    if (patching.component)
        renderComponent(!reuse_vnode, next_props);
    if (!reuse_vnode)
        renderNode(parent_node, key, kids, replacing_child);
}
function renderNode(parent_node, key, kids, replacing_child) {
    if (root) {
        if (patching.component) {
            if (!just_patched)
                throw new Error("component didn't call any elements");
            patching.node = just_patched.node;
            patching.node["__reactiv_view_node"] = patching;
        }
        if (parent_node && patching.node) {
            if (key)
                kids.filter(function (c) { return c.key === key; }).forEach(function (c) { return c.node = patching.node; });
            // If the node has a key, remove it from the DOM to prevent a large number of re-orders in the case that it moved far or was completely removed. Since we hold on to a reference through the keyMap, we can always add it back.
            if (replacing_child && replacing_child.node && replacing_child.key)
                parent_node.replaceChild(patching.node, replacing_child.node);
            else
                parent_node.insertBefore(patching.node, replacing_child ? replacing_child.node : null);
        }
    }
    if (patching.component && patching.node)
        call(patching, "componentDidMount");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3Rpdi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWFjdGl2LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBYSxlQUFPLEdBQUcsR0FBRyxDQUFDO0FBNEIzQixJQUFJLElBQVcsQ0FBQztBQUNoQixJQUFJLFlBQW1CLENBQUM7QUFDeEIsSUFBSSxRQUFlLENBQUM7QUFDcEIsSUFBSSxVQUFpQixDQUFDO0FBRXRCO0lBRUksbUJBQW1CLEtBQVE7UUFBUixVQUFLLEdBQUwsS0FBSyxDQUFHO1FBQ1gsSUFBSSxDQUFDLENBQUMsNkNBQTZDO0lBQ25FLENBQUM7SUFDRCxzQ0FBa0IsR0FBbEIsVUFBbUIsS0FBVyxFQUFFLEtBQVcsSUFBSSxDQUFDOztJQUNoRCxxQ0FBaUIsR0FBakIsVUFBa0IsS0FBVyxFQUFFLEtBQVcsSUFBSSxDQUFDOztJQUMvQyx3Q0FBb0IsR0FBcEIsVUFBcUIsS0FBVyxFQUFFLEtBQVcsSUFBSSxDQUFDOztJQUNsRCx5Q0FBcUIsR0FBckIsVUFBc0IsVUFBZ0IsRUFBRSxVQUFnQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFFLDZDQUF5QixHQUF6QixVQUEwQixVQUFnQixFQUFFLFVBQWdCLElBQUksQ0FBQzs7SUFDakUsMEJBQU0sR0FBTixjQUFXLENBQUM7O0lBQ1osNEJBQVEsR0FBUjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFDRCw0QkFBUSxHQUFSLFVBQVMsS0FBUTtRQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUFqQkQsSUFpQkM7QUFqQlksaUJBQVMsWUFpQnJCLENBQUE7QUFFRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7QUFFZCxlQUFzQixPQUFnQixFQUFFLEVBQXFCO0lBQ3pELElBQUksSUFBSSxHQUFHLENBQUMsT0FBTyxHQUFHLE9B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